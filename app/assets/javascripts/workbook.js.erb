var initHeight;
var finHeight;
var headInitHeight;
var headFinHeight;
var $head;


$(document).on("ready", function() {
	$("a.fancybox").fancybox({
		helpers: {
			overlay: {
				css: {
					"background": "rgba(40, 30, 40, 0.90)"
				}
			}
		}
	});
});

$(document).on("click", "#resource_button", function() {
	if ($("#resource").css("height") == initHeight+"px") {
		openResources();
	} else {
		closeResources();
	}
});
function populate(url, audience) {
	$.getJSON(url).success(function(answers) {
		for (var i = 0; i < answers.length; i++) {
			displayAnswer(answers[i]);
			displayFeedback(answers[i], audience);
		}
	}).error(function(data) {
		console.log("Error fetching answer JSON.");
	});
}
function displayAnswer(answer) {
	switch (answer.question.input_type) {
		case "text":
			$(".populate_student_answers [name=q_"+answer.question.id+"]").val(answer.content);
			$(".populate_student_answers [name=q_"+answer.question.id+"]").data({"answer_id": answer.id});
			break;
		case "drawing_base64":
			replaceDrawing(answer);
			break;
		default:
			console.log("Input type not recognized for Answer#"+answer.id);
			break;
	}
}
function replaceDrawing(answer) {
	$("#d_"+answer.question.id).hide();
	$("#d_"+answer.question.id).siblings(".drawing_tools").hide();
	var $img_tag = $('<img>', {src: answer.content});
	var $redo_btn = $('<button>', {class: "drawing_redo_btn", text: "Redo drawing",
			data: {drawing_id: answer.question.id, answer_id: answer.id}})
	var $display_div = $('<div>', {class: "completed_drawing", name: "q_"+answer.question.id, data: {"answer_id": answer.id}});
	$display_div.append($img_tag);
	$display_div.append($redo_btn);
	$("#d_"+answer.question.id).parent().append($display_div);
}
function initDrawingBG(canvas, default_txt, default_img) {
	var ctx = canvas[0].getContext("2d");
	if (default_img != null) {
		var gfx = new Image();
		gfx.onload = function() {
			ctx.drawImage(gfx, 0, 0);
		}
		gfx.src = default_img;
	}
	if (default_txt != null) {
		ctx.fillColor = "black";
		ctx.font = "18px Arial";
		ctx.textBaseline = "top";
		ctx.fillText(default_txt, 5, 5);
	}
}
function displayFeedback(answer, audience) {
	var $feedbackDiv = $('<div>', {class: "feedback", id: "f_"+answer.question.id, data: {"answer_id": answer.id}});
	$("[name=q_"+answer.question.id+"]").after($feedbackDiv);
	if (audience == "student") {
		displayStudentFeedback(answer);
	} else if (audience == "teacher") {
		displayTeacherFeedback(answer);
	}
}
function displayStudentFeedback(answer) {
	if (answer.feedback) {
		if (answer.feedback.status != null) {
			var feedbackTypes = ["incomplete", "correct", "incorrect"];
			if ($.inArray(answer.feedback.status, feedbackTypes) > -1) {
				var $feedbackImg = $('<img>', {src: "/images/workbook_templates/"+answer.feedback.status+"_icon.png"})
				$("#f_"+answer.question.id).append($feedbackImg);
			} else {
				console.log("Feedback status not recognized for Answer#"+answer.id);
			}
		}
		if (answer.feedback.content != null) {
			var $feedbackTxt = $('<textarea>', {name: "f_"+answer.question.id, disabled: "disabled"});
			$feedbackTxt.val(answer.feedback.content);
			$("#f_"+answer.question.id).append($feedbackTxt);
		}
	}
}
function displayTeacherFeedback(answer) {
	$feedbackEditorDiv = createFeedbackEditor("f", answer.question.id)
	if (answer.feedback) {
		if (answer.feedback.content != null) {
			$feedbackEditorDiv.find(".feedback_txt").val(answer.feedback.content);
		}
		if (answer.feedback.status != null) {
			$feedbackEditorDiv.find(".feedback_"+answer.feedback.status+"_btn").addClass("selected_feedback");
		}
	}
	$(".populate_student_answers [name=q_"+answer.question.id+"]").siblings(".feedback").append($feedbackEditorDiv);
}
function createFeedbackEditor(type, id) {
	var $feedbackButtonsDiv = $('<div>', {class: "feedback_buttons"});
	var $correctBtn = $('<img>', {src: "/images/workbook_templates/correct_button.png", class: "feedback_correct_btn"});
	var $incompleteBtn = $('<img>', {src: "/images/workbook_templates/incomplete_button.png", class: "feedback_incomplete_btn"});
	var $incorrectBtn = $('<img>', {src: "/images/workbook_templates/incorrect_button.png", class: "feedback_incorrect_btn"});

	var $feedbackEditorTxt = $('<textarea>', {class: "feedback_txt", name: type+"_"+id});
	var $feedbackEditorDiv = $('<div>', {class: "feedback_editor"});
	$feedbackButtonsDiv.append($correctBtn, $incompleteBtn, $incorrectBtn);
	$feedbackEditorDiv.append($feedbackButtonsDiv, $feedbackEditorTxt);
	return $feedbackEditorDiv;
}
function saveStatusFeedback(url, btn, val, auth_token) {
	var info = btn.parent().siblings(".feedback_txt").attr("name").split("_");
	if (info[0] == "f") {
		var qid = info[1];
		var feed_id = $("#f_"+qid).data("answer_id");
		var feed_type = "Answer";
	} else if (info[0] == "m") {
		var feed_id = info[1];
		var feed_type = "Milestone";
	}
	var d = {feedback: {status: val, feedbackable_type: feed_type, feedbackable_id: feed_id}, authenticity_token: auth_token};
	saveFeedback(url, d, btn.parent().parent(), ".feedback_"+val+"_btn");
}
function saveFeedback(save_url, d, btns, selected) {
	var $img = $("<img>", {class: "feedback_response_img", src: "/images/_spinner.gif"});
	btns.append($img);
	$.ajax({
 		type: "POST",
 		url: save_url,
 		data: d,
 		success: function() {
 			if (selected) {
 				btns.find("img").removeClass("selected_feedback");
				btns.find(selected).addClass("selected_feedback");
 			}
 			$img.attr("src", "/images/check.png");
 			$img.fadeOut(750);
 		},
 		error: function() {
 			console.log("Problem saving data...");
 		}
	});
}
function loadStudentMilestones(url, is_student, current_lesson_id, audience) {
	$.getJSON(url).success(function(lessons) {
		if (is_student) {
			displayStudentTimeline(lessons);
			lesson_array = lessons;
		}
		for (var i = 0; i < lessons.length; i++) {
			if (lessons[i].id == current_lesson_id) {
				displayMilestoneFeedback(lessons[i], audience);
			}
		}
	}).error(function(data) {
		console.log("Error fetching answer JSON.");
	});
}
function displayStudentTimeline(lessons) {
	var timeline_width = $("#timeline_overlay").width() - 24;
	var lesson_width = timeline_width / lessons.length;

	for (i = 0; i < lessons.length; i++) {
		var lesson = lessons[i];
		var $div = $('<a>', {class: "timeline_lesson", id: "lesson"+(i+1), "data-lesson_id": lesson.id});
		$div.css("width", lesson_width);
		if (lesson.milestones.length > 0) {
			if (lesson.milestones[0].feedback != null) {
				if (lesson.milestones[0].feedback.status == "correct") {
					$div.css({
						"background-color": "#1EA62B",
						"backgroundImage": "url('<%= image_url 'workspace/timeline_break.png' %>')"
					});
				} else if (lesson.milestones[0].feedback.status == "incomplete") {
					$div.css({
						"background-color": "#E0CA05",
						"backgroundImage": "url('<%= image_url 'workspace/timeline_break.png' %>')"
					});
				} else if (lesson.milestones[0].feedback.status == "incorrect") {
					$div.css({
						"background-color": "#ff0000",
						"backgroundImage": "url('<%= image_url 'workspace/timeline_break.png' %>')"
					});
				} else {
					$div.css({
						"backgroundImage": "url('<%= image_url 'workspace/timeline_break.png' %>')"
					});
					console.log("Unrecognized milestone status on lesson #"+lesson.id);
				}
			}
		} else {
			$div.css({
				"background-color": "none",
				"backgroundImage": "url('<%= image_url 'workspace/timeline_break.png' %>')",
				"backgroundRepeat": "no-repeat"
			});
		}
		var $num_img = $('<img>', {src: "/images/workbook_templates/number(0"+lesson.number+").png"});
		var $header1 = $('<h1>', {text: "Lesson "+lesson.number});
		var $header2 = $('<h2>', {text: lesson.title});
		var $timeline_lesson_overlay = $('<div>', {class: "timeline_lesson_overlay"});
		$div.append($num_img);
		$div.append($header1);
		$div.append($header2);
		$div.append($timeline_lesson_overlay);
		$('#timeline_lessons').append($div);
	}
}
function setTimelineHeight() {
	if ($("#head_student").length) {
		$head = $("#head_student");
	} else {
		$head = $("#head");
		$("#resource").css("top", 57);
	}
	initHeight = 27;
	finHeight = $("#resource").css("height");
	headInitHeight = $head.height();
	headFinHeight = parseInt(headInitHeight) + (parseInt(finHeight) - initHeight);
	$("#resource").css("height", initHeight);
}
function closeResources() {
	$("#resource").animate({"height": initHeight}, 200);
	$head.animate({"height": headInitHeight}, 200);
}
function openResources() {
	$("#resource").animate({"height": finHeight}, 200);
	$head.animate({"height": headFinHeight}, 200);
}
function updateTimelineWidth() {
	var timeline_width = $(window).width() - 188 - 24;
	var lesson_width = timeline_width / lesson_array.length;
	for (i = 0; i < lesson_array.length; i++) {
		var $lesson = $("#lesson"+(i+1));
		console.log($lesson);
		$lesson.width(lesson_width);
	}
}
function displayMilestoneFeedback(lesson, audience) {
	if (lesson.milestones[0] != null) {
		var m = lesson.milestones[0];
		$milestoneFeedback = $("<div>", {id: "m_"+m.id});
		if (audience == "teacher") {
			$feedbackEditorDiv = createFeedbackEditor("m", m.id);
			if (m.feedback != null) {
				if (m.feedback.content != null) {
					$feedbackEditorDiv.children(".feedback_txt").val(m.feedback.content);
				}
				if (m.feedback.status != null) {
					$feedbackEditorDiv.find(".feedback_"+m.feedback.status+"_btn").addClass("selected_feedback");
				}
			}
			$milestoneFeedback.append("<p>Teacher feedback on this lesson:</p>");
			$milestoneFeedback.append($feedbackEditorDiv)
			$("#content").append($milestoneFeedback);
		} else if (audience == "student") {
			$studentFeedbackDiv = $("<div>");
			if (m.feedback.status != null) {
				var feedbackTypes = ["incomplete", "correct", "incorrect"];
				if ($.inArray(m.feedback.status, feedbackTypes) > -1) {
					var $feedbackImg = $('<img>', {src: "/images/workbook_templates/"+m.feedback.status+"_icon.png"})
					$studentFeedbackDiv.append($feedbackImg);
				} else {
					console.log("Feedback status not recognized for Milestone#"+m.id);
				}
			}
			if (m.feedback.content != null) {
				var $feedbackTxt = $('<textarea>', {name: "m_"+m.id, disabled: "disabled"});
				$feedbackTxt.val(m.feedback.content);
				$studentFeedbackDiv.append($feedbackTxt);
				console.log("Trying to display the feedback text");
				console.log($studentFeedbackDiv);
			}
			if (m.feedback.status != null || m.feedback.content != null) {
				$milestoneFeedback.append("<p>Teacher feedback on this lesson:</p>");
				$milestoneFeedback.append($studentFeedbackDiv);
				$("#content").append($milestoneFeedback);
			}
		}
	}
}